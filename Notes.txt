Angular is a front-end development framework.
It can develop Single Page Applications
NPM = Node Package Manager
CLI = Command Line Interface

installing angular

npm install -g @angular/cli@latest

starting angular 
|-  ng serve


Intalling bootstrap locally
|- npm install --save bootstrap@3


DOM vs V-DOM
DOM stands for document object model
document = html file
object = header tag, body tag or any tag in html file
model = it is basically a layout of our html file

=====================================================================
Package.json contains all the detials of the project like Script, name of project, dependencies

Package-lock.json== this file contains all the details about the libraries and there sub files.

angular.json = it is the application configuration file.

Node_module = This folder contains all the libraries like csstools, angulardevkit. using npm will regenrate this folder

src folder= this folder contians all the dev file in which we will edit things.

app folder = this folder contains all the editable files like html,css,ts

assests folder = it is used to store extra images and files.

browserslistrc is used to tell that which browsers are supported.

karma.config.js = it used to config the test cases.

pollyfills.ts is used to add some libraries that are useful to support on browers

when we define a data in app.component.ts file and call it using {} it is known as dynamic data and to disply the data in html, we achieve it through interpolation.


tsconfig.json = it is used to config globally
tsconfig.app.json = it is used to config the app file. This file extends tsconfig.json.
tsconfig.spec.json = for test files.


style.css file will used to implement the css in the entire web page.


bootstrap is used to connect and load the entire angular file to html.


app is by default a root component.

module is big and complex functionality where component is small. Modules consist of one or more components. They do not control any html. Your modules declare which components can be used by components belonging to other modules, which classes will be injected by the dependency injector and which component gets bootstrapped. Modules allow you to manage your components to bring modularity to your app.

We built our whole application by composting it from various components.

Decorators are used to enhence your classes or elements. 

Angular usually uses components to create web pages and uses modules to bundle different pieces of components.


~~~~~~~~~~~~~ to generate a component and module and class
1) ng generate component (name)
   ng g c (name)

2) ng generate module (name)

3) ng generate class (name)

In app.module we do not add the extension of the file while giving the location becuase the app will automatically add it.




$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    DAY 2    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


Each component must have a template file.

While using selector,
1) Selectors will work with attributes, selectors(elements), and class.
2) Selectors will not work with id's.

String Interpolation in Angular 8 is a one-way data-binding technique that is used to transfer the data from a TypeScript code to an HTML template (view). It uses the template expression in double curly braces to display the data from the component to the view. String interpolation adds the value of a property from the component to the HTML template view.

Property binding uses [] and event binding uses ().

$event reserved word which is used to give access to the data.

Two way binding means updating and displaying the property at the same time.

A module is a mechanism to group componenets, directives, pipes and services.


One way binding:

In one-way binding, the data flow is one-directional.
This means that the flow of code is from typescript file to Html file.
In order to achieve a one-way binding, we used the property binding concept in Angular.
In property binding, we encapsulate the variable in Html with square brackets[ ].
We will understand this concept through an example in order to make it more comprehensible.

Two-way binding:

In a two-way binding, the data flow is bi-directional.
This means that the flow of code is from ts file to Html file as well as from Html file to ts file.
In order to achieve a two-way binding, we will use ngModel or banana in a box syntax.
To make sure the app doesn’t break, we need to import ‘FormsModule’ from ‘@angular/forms.
Any changes to the view are propagated to the component class. Also, any changes to the properties in the component class are reflected in the view.
To bind two properties in order to two-way binding works, declare the ngModel directive and set it equal to the name of the property.
We will understand the concept through an example in order to make it more comprehensible.

Life cycle hooks are the methods that angular invokes on the directives and component as it creates, changes and destroy them. 
Directives are instruction in DOM. These are classes that add additional behaviour to elements. These are of three types
1) Component
2) Structural
3) Attribute


*ngIf--- the * is required because ngIf is a structural directive which means it changes the structure of our DOM. So the ngIf is a directice and the * is required to make it work correctly.

Unlike structural directive, attribute directives don't add or remove elements they only change the element they are placed on.

[ngStyle] = ngStyle is the directive and the square brackets indicate that we want to bind some property to this directive and this property name also been ngStyle.


! is ======= That's the non-null assertion operator. It is a way to tell the compiler "this expression cannot be null or undefined here, so don't complain about the possibility of it being null or undefined." Sometimes the type checker is unable to make that determination itself.


The FormBuilder provides syntactic sugar that shortens creating instances of a FormControl, FormGroup, or FormArray. It reduces the amount of boilerplate needed to build complex forms.

doubt ques ngSubmit vs [ngSubmit] vs (ngSubmit)

Angular have two approaches in forms:-
1) Template-Driven = Angular infers the Form Object from the DOM
2) Reactive = Programmer creates the form and it is programmatically and synchronized with the DOM.

For reactive form we have to first import the reactive form in app.module.ts.
in app.component.ts we have to import FormGroup(Will control our complete form like what is inside the form and it is valide or not) and FormControl(It will specifically handle the single input field)
After this create an instance of form as formName = new FormGroup({ input1 = new FormControl('~~inside this default value of the form')  })

Then move to HTML file and there add the FormGroup in the form tag and with formName ==> [formGroup]="formName"
now add formControlName="input1" in every input
use .value to print what's inside the input box. 


services are basically classes which may have data properties or functions and we can use/share this data with other files.
using services--

first create services folder and in that run command ==> ng g service foldername/filename
2 files will be created and from there edit the ts file and declare a function with data inside it. =====> 
user(){
    return [{name:'Ramesh',email:'ramesh@g.com'},
    {name:'Jayesh',email:'jayesh@g.com'},
    {name:'Rudhra',email:'Rudhra@g.com'},
    {name:'Kalki',email:'kalki@g.com'}]
  }
}

After this import this function in app.comp.ts and footer.comp.ts

Pipes are simple functions to use in template expressions to accept an input value and return a transformed value.

three types of directives
|-- Component directives - these are the main class having the details of how the component should instantiated, processed and used at runtime.
|-- Structural directive - these are used to deal with manipulating the DOM elements. eg *ngIf *ngFor
|-- Attribute directives - these are used to change the look and behaviour of the dom elements.


Constructors define which parameters to provide when instantiate your objects.


Services are classes with special purpose.
We use service to:-
|-- Share the data
|-- Implement application logic
|-- External Interaction

Dependencies Injection - DI is a coding pattern in which a class receives its dependencies from external source rather then creating them itself.

Using Service
|-- Create a Service Class
|--Register the service with angular built-in injector
|--Declare the service as dependency in the class that needs it.

				Employee Service
				           |
   		  ------------------------------------------------------------
		  |					        |
    	      Employee List				         Employee details

Injectable tells the angular that this service might itself have injectable dependencies. So it is use to inject a service in another service. 


Observables = An observable is a sequence of items(HTTP response) that arrive asynchronously over time.
HTTP call - Single item
single item - Http response

Using HTTP and observables-

APP.MODULE.TS

1) import { HttpClientModule } from '@angular/commom/http';    === in app.module.ts
2) then add HttpClientModule in imports

1) import { HttpClient } from '@angular/commom/http';    === in employee.service.ts
2) in constructor == constructor(private http: HttpClient){ }
3) create a function in that return this.http.get<'name of interface'>(this.url);
4) private url:string=" ";
5) Create an interface in app folder
6) Now import the interface with name and in employee.service.ts
7) Import the observables from RxJS==== function ():Observables<interface name[]>

1) in employee.list.ts
inside ngOnInit(){
	this.(constructor name).function name()
		.subscribe(data=> this.list name = data)}

@Input and @Output

Whenever we want to get the data from parent to child component we use Input Decorator and whenever from child to parent we use Output Decorator. 

Interfaces can be implemented by classes and when they are, they force classes to have the structure that is defined by the classes. It also acts as object type.

